colnames(t)
colnames(t)
plot.network(w_n,labels = colnames(t))
plot.network(w_n,label = colnames(t))
migration
umwelt
str_split("das ist ein Test, der Zeigen soll.", " ")
length(unlist(str_split("das ist ein Test, der Zeigen soll.", " ")))
length(unlist(str_extract_all("das ist ein Test!?.", "!|?|.")))
length(unlist(str_extract_all("das ist ein Test!?.", "\!|\?|\.")))
length(unlist(str_extract_all("das ist ein Test!?.", "\\!|\\?|\\.")))
all_reden.x <- all_corpus %>% filter(type == "Zuruf|Widerspruch|Kommentar|Lachen")
load("Ergebnisdaten/korpus09_13.RData")
reden09 <- all_reden
load("Ergebnisdaten/korpus13_17.RData")
reden13 <- all_reden
load("Ergebnisdaten/korpus_okt17_okt18.RData")
reden17 <- all_corpus
reden13$speech_id %<>% as.character()
reden09$speech_id %<>% as.character()
all_corpus <- bind_rows(reden09, reden13, reden17)
all_reden.x <- all_corpus %>% filter(type == "Zuruf|Widerspruch|Kommentar|Lachen")
all_reden.x <- all_corpus %>% filter(type == c("Zuruf","Widerspruch","Kommentar","Lachen"))
all_reden.x <- all_corpus %>% filter(type %in% c("Zuruf","Widerspruch","Kommentar","Lachen"))
all_reden.x %<>% group_by(speech) %>% summarise(n_zwischenruf = n())
liste_freundlich <- c("bitte*" ,
"dank*" ,
"gerne",
"herzlich*",
"verehrte*",
"dankbar*",
"geehrte*",
"würde",
"könnte",
"würde",
"möchte",
"hätte",
"sollte" ,
"wäre",
"dürfte",
"dürfen",
"auseinandersetzung",
"konflikt",
"sorg*",
"fried*",
"respekt*",
"mensch*",
"betroffene*",
"hilf*",
"hoffnung*",
"gemeinsam*",
"zusammen*",
"ja",
"vertrauen*",
"trau*",
"stütze*",
"ausgleich*",
"angleich*",
"sinn*",
"denk*",
"gedanken*",
"perspektiv*",
"dafür*",
"fürsorg*",
"orientier*",
"bewusst*",
"zukunft",
"vorsorg*",
"berat*",
"sprechen",
"absprech*",
"sachlich*",
"fundiert*",
"ausgewogen",
"verhältnis*",
"möglichkeit*",
"interesse*",
"gleich*",
"ähnlich*",
"brücke*",
"verbind*",
"angleich*",
"zuhöre*",
"vorsicht*",
"umsicht*",
"geduld*",
"besonnen*",
"besinn*",
"gedanke*"
)
View(all_reden.x)
all_reden.x <- all_corpus %>% filter(type %in% c("Zuruf","Widerspruch","Kommentar","Lachen"))
all_reden.x <- all_corpus %>% filter(type %in% c("Zuruf","Widerspruch","Kommentar","Lachen"))
View(all_reden.x)
all_reden.y <- all_reden.x %>% group_by(speech) %>% summarise(number = n())
liste_unfreundlich <-  c(„urteil*“,
„schwäch*“,
„schwach*“,
„quatsch*“,
„gerede“,
„infam“,
„recht“,
„straf*“,
„macht*“,
„krimin*“,
„inzucht“,
„einfach*“,
„lüge*“,
„erfind*“,
„erfunden“,
„verharmlos*“,
„schrott*“,
„konsequenz*“,
„popanz“,
„alber*“,
„märchen*“,
„nein“,
„gegenteil“,
„kommunist*“,
„nazi*“,
„unverschämt*“,
„schand*“,
„blöd*“,
„unsinn*“,
„krieg*“,
„kampf*“,
„lust*“,
„provo*“,
„leist*“,
„volk“,
„falsch*“,
„scheiter*“,
„gewalt*“,
„jawohl“,
„sieg*“,
„mach*“,
„durchsetz*“,
„durchgreife*“,
„betrug“,
„betrüg*“,
„erschleiche*“,
„erschwindel*“,
„rausschmeiße*“,
„rausschmiss“,
„rauswerf*“,
„vernicht*“,
„endgültig“,
„klar“,
„angst“,
„ekel*“,
„migrant*“,
„ausländer*“,
„stärke“,
„konsequen*“,
„entartete*“,
„wille“,
„wollen“,
„gerecht*“,
„krank*“,
„träum*“,
„hass*“,
„gott“,
„behaupt*“,
„behauptung*“,
„unverschämt*“,
„ahnung“,
„propaganda“,
„schwafel*“,
„heuch*“,
„abart*“,
„beweis*“,
„schlag*“,
„schläg*“,
„pack*“,
„blind*“,
„gehorsam*“,
„verhöhn*“,
„hohn“,
„spott*“,
„reiß*“,
„zerreiß*“,
„stech*“,
„bodenlos*“,
„frech*“,
„aggressiv*“,
„täter*“)
liste_unfreundlich <- c("urteil*","schwäch*",
"schwach*","quatsch*",
"gerede","infam",
"recht","straf*",
"macht*","krimin*",
"inzucht","einfach*",
"lüge*","erfind*",
"erfunden","verharmlos*",
"schrott*","konsequenz*",
"popanz","alber*",
"märchen*","nein",
"gegenteil","kommunist*",
"nazi*","unverschämt*",
"schand*","blöd*",
"unsinn*","krieg*",
"kampf*","lust*",
"provo*","leist*",
"volk","falsch*",
"scheiter*","gewalt*",
"jawohl","sieg*",
"mach*","durchsetz*",
"durchgreife*","betrug",
"betrüg*","erschleiche*",
"erschwindel*","rausschmeiße*",
"rausschmiss","rauswerf*",
"vernicht*","endgültig",
"klar","angst",
"ekel*","migrant*",
"ausländer*","stärke",
"konsequen*","entartete*",
"wille","wollen",
"gerecht*","krank*",
"träum*","hass*",
"gott","behaupt*",
"behauptung*","unverschämt*",
"ahnung","propaganda",
"schwafel*","heuch*",
"abart*","beweis*",
"schlag*","schläg*",
"pack*","blind*",
"gehorsam*","verhöhn*",
"hohn","spott*",
"reiß*","zerreiß*",
"stech*","bodenlos*",
"frech*","aggressiv*",
"täter*")
View(all_reden.y)
reden_corpus <- left_join(reden_corpus, all_reden.y, by = "speech")
View(reden_corpus)
for (i in 1:length(reden_corpus$speech)){
worte <- reden_corpus[i ,"speech"] %>% tokens(remove_punct = TRUE, remove_numbers = TRUE) %>% tokens_tolower() %>% unlist()
reden_corpus[i,"anzahl_ausrufezeichen"] <- length(unlist((str_extract_all(reden_corpus[i,"speech"], "\\!"))))
reden_corpus[i, "anzahl_wörter"] <- length(unlist(str_split(reden_corpus[i,"speech"], " ")))
reden_corpus[i, "anzahl_sätze"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\!|\\?|\\.")))
reden_corpus[i, "anzahl_fragezeichen"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\?")))
reden_corpus[i, "anzahl_kommas"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], ",")))
reden_corpus[i, "n_komm_friedlich"] <- length(which(worte %in% liste_freundlich))
reden_corpus[i, "n_komm_unfriedlich"] <- length(which(worte %in% liste_unfreundlich))
}
for (i in 1:length(reden_corpus$speech)){
worte <- reden_corpus$speech[i] %>% tokens(remove_punct = TRUE, remove_numbers = TRUE) %>% tokens_tolower() %>% unlist()
reden_corpus[i,"anzahl_ausrufezeichen"] <- length(unlist((str_extract_all(reden_corpus[i,"speech"], "\\!"))))
reden_corpus[i, "anzahl_wörter"] <- length(unlist(str_split(reden_corpus[i,"speech"], " ")))
reden_corpus[i, "anzahl_sätze"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\!|\\?|\\.")))
reden_corpus[i, "anzahl_fragezeichen"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\?")))
reden_corpus[i, "anzahl_kommas"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], ",")))
reden_corpus[i, "n_komm_friedlich"] <- length(which(worte %in% liste_freundlich))
reden_corpus[i, "n_komm_unfriedlich"] <- length(which(worte %in% liste_unfreundlich))
}
for (i in 1:length(reden_corpus$speech)){
worte <- reden_corpus$speech[i] %>% tokens() %>% tokens_tolower() %>% unlist()
reden_corpus[i,"anzahl_ausrufezeichen"] <- length(unlist((str_extract_all(reden_corpus[i,"speech"], "\\!"))))
reden_corpus[i, "anzahl_wörter"] <- length(unlist(str_split(reden_corpus[i,"speech"], " ")))
reden_corpus[i, "anzahl_sätze"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\!|\\?|\\.")))
reden_corpus[i, "anzahl_fragezeichen"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\?")))
reden_corpus[i, "anzahl_kommas"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], ",")))
reden_corpus[i, "n_komm_friedlich"] <- length(which(worte %in% liste_freundlich))
reden_corpus[i, "n_komm_unfriedlich"] <- length(which(worte %in% liste_unfreundlich))
}
reden_corpus$speech[1]
for (i in 1:length(reden_corpus$speech)){
worte <- reden_corpus$speech[1] %>% quanteda::tokens(remove_punct = TRUE, remove_numbers = TRUE) %>% tokens_tolower() %>% unlist()
reden_corpus[i,"anzahl_ausrufezeichen"] <- length(unlist((str_extract_all(reden_corpus[i,"speech"], "\\!"))))
reden_corpus[i, "anzahl_wörter"] <- length(unlist(str_split(reden_corpus[i,"speech"], " ")))
reden_corpus[i, "anzahl_sätze"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\!|\\?|\\.")))
reden_corpus[i, "anzahl_fragezeichen"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\?")))
reden_corpus[i, "anzahl_kommas"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], ",")))
reden_corpus[i, "n_komm_friedlich"] <- length(which(worte %in% liste_freundlich))
reden_corpus[i, "n_komm_unfriedlich"] <- length(which(worte %in% liste_unfreundlich))
}
View(reden_corpus)
View(all_corpus)
reden_corpus<- all_corpus %>% select(speaker_party, date, speech, speech_id)%>% distinct()
reden_corpus <- left_join(reden_corpus, all_reden.y, by = "speech")
all_corpus <- NULL
reden09 <- NULL
reden13 <- NULL
reden17 <- NULL
all_reden <- NULL
# Anzahl ausrufezeichen.
for (i in 1:length(reden_corpus$speech)){
worte <- reden_corpus$speech[i] %>% quanteda::tokens(remove_punct = TRUE, remove_numbers = TRUE) %>% tokens_tolower() %>% unlist()
reden_corpus[i,"anzahl_ausrufezeichen"] <- length(unlist((str_extract_all(reden_corpus[i,"speech"], "\\!"))))
reden_corpus[i, "anzahl_wörter"] <- length(unlist(str_split(reden_corpus[i,"speech"], " ")))
reden_corpus[i, "anzahl_sätze"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\!|\\?|\\.")))
reden_corpus[i, "anzahl_fragezeichen"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], "\\?")))
reden_corpus[i, "anzahl_kommas"] <- length(unlist(str_extract_all(reden_corpus[i,"speech"], ",")))
reden_corpus[i, "n_komm_friedlich"] <- length(which(worte %in% liste_freundlich))
reden_corpus[i, "n_komm_unfriedlich"] <- length(which(worte %in% liste_unfreundlich))
}
View(reden_corpus)
library(xlsx)
write.xlsx(reden_corpus, file = "vivan_sprache.xlsx")
vivian <- reden_corpus %>% select(-speech)
View(vivian)
write.xlsx(vivian, file = "vivan_sprache.xlsx")
View(vivian)
rm(corpus)
rm(all_reden.x)
rm(all_reden.y)
rm(tokens_sent)
rm(toks_sent)
rm(reden_corpus)
vivian <- reden_corpus %>% select(-speech)
write.xlsx(vivian, file = "vivan_sprache.xlsx")
write.csv2(vivian, file = "vivan_sprache.csv2")
write.csv(vivian, file = "vivan_sprache.csv")
write.xlsx(vivian, file = "vivan_sprache.xlsx", showNA = F)
vivan$date %<>% as.character()
vivian$date %<>% as.character()
write.xlsx(vivian, file = "vivan_sprache.xlsx", showNA = F)
View(vivian)
vivian$date %<>% as.character()
write.xlsx(vivian, file = "vivan_sprache.xlsx", showNA = F)
write.xlsx2(vivian, file = "vivan_sprache.xlsx", showNA = F)
write_excel_csv(vivian, file = "vivan_sprache.xlsx", showNA = F)
write_excel_csv(vivian, file = "vivan_sprache.csv")
write_excel_csv(vivian)
write_excel_csv(vivian, path = "Vivian.csv")
View(w)
library(xlsx)
library(tidyverse)
library(magrittr)
library(rlist)
library(purrr)
# Auswertung der inhaltlichen Stichprobe
vivian <- read.xlsx(file ="Ergebnisdaten/Fertige_Stichproben/vivian_inhalt.xlsx", sheetIndex = 1, encoding = "UTF-8")
nils <- read.xlsx(file ="Ergebnisdaten/Fertige_Stichproben/nils_inhalt.xlsx", sheetIndex = 1, encoding = "UTF-8")
mehmet <- read.xlsx(file ="Ergebnisdaten/Fertige_Stichproben/mehmet_inhalt.xlsx", sheetIndex = 1, encoding = "UTF-8")
vivian$kodierer <- "vivian"
nils$kodierer <- "nils"
mehmet$kodierer <- "mehmet"
gesamt_inhalt <- bind_rows(vivian, nils, mehmet)%>% select(speech_id, speaker_party, date, rede = X_Redeinhalt, top = X_Topinhalt, kodierer)
gesamt_inhalt <- bind_rows(vivian, nils, mehmet)%>% select(speech_id, speaker_party, date, kodierer)
warinings()
warnings()
View(gesamt_inhalt)
gesamt_inhalt <- bind_rows(vivian, nils, mehmet)%>% select(speech_id, speaker_party, speaker, date, kodierer)
View(gesamt_inhalt)
load("Ergebnisdaten/corpus_09_13.R")
reden09 <- all_reden
load("Ergebnisdaten/corpus_13_17.R")
reden13 <- all_reden
load("Ergebnisdaten/corpus_okt17_okt18.R")
reden17 <- all_corpus
reden13$speech_id %<>% as.character()
reden09$speech_id %<>% as.character()
all_corpus <- bind_rows(reden09, reden13, reden17)
load("Ergebnisdaten/korpus09_13.RData")
reden09 <- all_reden
load("Ergebnisdaten/korpus13_17.RData")
reden13 <- all_reden
load("Ergebnisdaten/korpus_okt17_okt18.RData")
reden17 <- all_corpus
reden13$speech_id %<>% as.character()
reden09$speech_id %<>% as.character()
all_corpus <- bind_rows(reden09, reden13, reden17)
load("Ergebnisdaten/korpus_okt09_okt10.RData")
reden09<- reden_okt
library("xlsx")
library("magrittr")
library("tidyverse")
## Stichprobe für Redeninhalte:
load("Ergebnisdaten/korpus_okt09_okt10.RData")
reden09<- reden_okt
load("Ergebnisdaten/korpus_okt13_okt14.RData")
reden13 <- reden_okt
load("Ergebnisdaten/korpus_okt17_okt18.RData")
reden17 <- all_corpus
rm(all_corpus)
rm(reden_okt)
## Stichprobenziehen:
# 1. Datum der Rede. 2. Redener 3. Redner Party 4. Rede Anfang 5. X_Redeinhalt 6. X_Topinhalt 7. X_Anzahl der
#Angreifenden Kommentare 8. X_Parteien_der Angreifenden Kommentare
# 1. Datensatz auf Reden reduzieren
reden09%<>% select(sitzungs_id, date, speaker, speaker_party, speech_id, speech)%>% distinct()
reden13%<>% select(sitzungs_id, date, speaker, speaker_party, speech_id, speech)%>% distinct()
reden17%<>% select(sitzungs_id, date, speaker, speaker_party, speech_id, speech)%>% distinct()
#2. Nur Reden von Parteien auswählen
reden09<- reden09[!is.na(reden09$speaker_party),]
reden13<- reden13[!is.na(reden13$speaker_party),]
reden17<- reden17[!is.na(reden17$speaker_party),]
#Plenarprotokolle
reden17 <- reden17[!is.na(reden17$sitzungs_id),]
set.seed(123)
plenar09 <- reden09$sitzungs_id %>% unique() %>% sample(60)
plenar13 <- reden13$sitzungs_id %>% unique() %>% sample(60)
plenar17 <- reden17$sitzungs_id %>% unique()
# 4. Stichprobe ziehen: Pro Plenardokument jeweils eine Rede
sample09 <- reden09[1,]
sample13 <- reden13[1,]
sample17 <- reden17[1,]
set.seed(123)
for (i in 1:length(plenar09)) {
sample09[i, ] <- filter(reden09, sitzungs_id == plenar09[i]) %>% sample_n(1)
}
for (i in 1:length(plenar13)) {
sample13[i,] <- filter(reden13, sitzungs_id == plenar13[i]) %>% sample_n(1)
}
for (i in 1:length(plenar17)) {
sample17[i,] <- filter(reden17, sitzungs_id == plenar17[i]) %>% sample_n(1)
}
sample09$speech_id%<>% as.character()
sample13$speech_id%<>% as.character()
all_sample <- bind_rows(sample09, sample13, sample17)
# 4.2 Für der Reli- Test werden jedem noch einmal 10 Reden hinzugefügt
all_sample$X_Redeinhalt <- NA
all_sample$X_Topinhalt  <- NA
all_sample$X_Sonstiges  <- NA
# 5. Reden auf Anfangswörter kürzen:
all_sample$speech %<>% strtrim(50)
all_sample %<>% sample_n(179)
# Reden zuteilen
Vivian <- bind_rows(all_sample[1:45, ], all_sample[85:90, ], all_sample[170:175, ])
Nils <- bind_rows(all_sample[45:90, ], all_sample[30:35, ], all_sample[165:170, ])
Mehmet <-bind_rows(all_sample[90:179, ], all_sample[25:30, ], all_sample[80:85, ])
View(Vivian)
library(xlsx)
library(tidyverse)
library(magrittr)
library(rlist)
library(purrr)
# 1. Stichprobe laden
vivian <- read.xlsx(file ="Ergebnisdaten/Fertige_Stichproben/vivian_inhalt.xlsx", sheetIndex = 1, encoding = "UTF-8")
nils <- read.xlsx(file ="Ergebnisdaten/Fertige_Stichproben/nils_inhalt.xlsx", sheetIndex = 1, encoding = "UTF-8")
mehmet <- read.xlsx(file ="Ergebnisdaten/Fertige_Stichproben/mehmet_inhalt.xlsx", sheetIndex = 1, encoding = "UTF-8")
vivian$kodierer <- "vivian"
nils$kodierer <- "nils"
mehmet$kodierer <- "mehmet"
gesamt_inhalt <- bind_rows(vivian, nils, mehmet)%>% select(speech_id, speaker_party, speaker, date, kodierer)
# 2. Gesamtcorpus laden
load("Ergebnisdaten/korpus09_13.RData")
reden09 <- all_reden
load("Ergebnisdaten/korpus13_17.RData")
reden13 <- all_reden
load("Ergebnisdaten/korpus_okt17_okt18.RData")
reden17 <- all_corpus
reden13$speech_id %<>% as.character()
reden09$speech_id %<>% as.character()
all_korpus <- bind_rows(reden09, reden13, reden17)
load("Ergebnisdaten/corpus_okt09_okt10.R")
reden09<- reden_okt
load("Ergebnisdaten/corpus_okt13_okt14.R")
reden13 <- reden_okt
load("Ergebnisdaten/corpus_okt17_okt18.R")
reden17 <- all_corpus
reden13$speech_id %<>% as.character()
reden09$speech_id %<>% as.character()
all_corpus <- bind_rows(reden09, reden13, reden17)
all_corpus %<>% select(speech, speech_id, date, speaker)
test <- left_join(gesamt_inhalt, all_corpus, by = c("speech_id", "date", "speaker"))
View(test)
test <- inner_join(gesamt_inhalt, all_corpus, by = c("speech_id", "date", "speaker"))
test <- left_join(gesamt_inhalt, all_corpus, by = c("speech_id", "date", "speaker"))
test <- inner_join(all_corpus, gesamt_inhalt, by = c("speech_id", "date", "speaker"))
View(test)
test <- semi_join(gesamt_inhalt, all_corpus, by = c("speech_id", "date", "speaker"))
View(test)
View(all_corpus)
test <- semi_join(gesamt_inhalt, all_corpus, by = c("speech_id", "date", "speaker"))
View(test)
test <- inner_join(all_corpus, gesamt_inhalt,by = c("speech_id", "date", "speaker"))
View(test)
View(test)
all_sample %<>% distinct()
all_sample <- inner_join(all_corpus, gesamt_inhalt,by = c("speech_id", "date", "speaker"))
all_sample %<>% distinct()
View(all_sample)
save(all_sample, file = "stichprobe_inhalt.RData")
load("stichprobe_inhalt.RData")
load("stichprobe_inhalt.RData")
load("Ergebnisdaten/korpus09_13.RData")
reden09 <- all_reden
load("Ergebnisdaten/korpus13_17.RData")
reden13 <- all_reden
load("Ergebnisdaten/korpus_okt17_okt18.RData")
reden17 <- all_corpus
reden13$speech_id %<>% as.character()
reden09$speech_id %<>% as.character()
all_korpus <- bind_rows(reden09, reden13, reden17)
View(all_sample)
all_korpus <- bind_rows(reden09, reden13, reden17)%>% filter(type == "kommentar")
View(all_corpus)
all_korpus <- bind_rows(reden09, reden13, reden17)
rm(all_corpus)
rm(all_reden)
View(all_korpus)
all_korpus <- bind_rows(reden09, reden13, reden17) %>% filter(type == "Kommentar")
View(all_korpus)
View(all_korpus)
all_korpus <- bind_rows(reden09, reden13, reden17) %>% filter(type == "Kommentar") %>% select(-c(type, party_action, top, speaker_id, beschreibung, entschuldigteAbgeordnete))
View(all_korpus)
stichprobe_zwischenrufe <- left_join( all_sample, all_korpus, by = "speech")
View(stichprobe_zwischenrufe)
stichprobe_zwischenrufe %<>% select(-c(speaker_party.x, speech_id.x, speaker.x))
View(stichprobe_zwischenrufe)
stichprobe_zwischenrufe %<>% na.omit()
View(stichprobe_zwischenrufe)
write.csv(stichprobe_zwischenrufe, "stichprobe_zwischenrufe.csv")
write.csv(stichprobe_zwischenrufe, "stichprobe_zwischenrufe.csv", fileEncoding = "UTF-8")
install.packages("benchmarkme")
library(benchmarkme)
get_cpu()
get_ram()
res <- benchmark_std(runs = 3)
plot(res)
